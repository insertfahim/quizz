// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId       String?  // Make optional for local auth, removed @unique to avoid null conflicts
  email         String   @unique // Make required and unique
  password      String?  // Add password field for local auth
  role          String   @default("student") // student, teacher, admin
  name          String?
  bio           String?
  profileImage  String?
  isActive      Boolean  @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdQuizzes Quiz[]  @relation("QuizCreator")
  submissions   QuizSubmission[]
  // Student side of quiz assignments
  assignedAssignments QuizAssignment[] @relation("StudentAssignments")
  // Teacher/admin who assigned quizzes
  givenAssignments    QuizAssignment[] @relation("AssignedByRelations")
  tasks         Task[]
  notifications Notification[]
  questionBanks QuestionBank[]
  auditLogs     AuditLog[]
}



model Quiz {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String?
  image           String?
  timeLimit       Int?      // Time limit in minutes
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  creatorId       String?   @db.ObjectId
  creator         User?     @relation("QuizCreator", fields: [creatorId], references: [id])
  questions       Question[]
  submissions     QuizSubmission[]
  assignments     QuizAssignment[]
}

model Question{
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  text            String
  type            String   @default("multiple_choice") // multiple_choice, true_false, short_answer
  quizId          String    @db.ObjectId
  difficulty      String?
  explanation     String?  // Explanation for the correct answer
  quiz            Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[]
  answers         QuizAnswer[]
}

model Option{
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  text            String
  isCorrect       Boolean
  questionId      String    @db.ObjectId
  question        Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedAnswers QuizAnswer[]
}




model QuizSubmission {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  quizId        String   @db.ObjectId
  quiz          Quiz     @relation(fields: [quizId], references: [id])
  score         Float    // Score achieved (0-100)
  totalQuestions Int     // Total number of questions
  correctAnswers Int     // Number of correct answers
  timeSpent     Int?     // Time spent in seconds
  submittedAt   DateTime @default(now())
  answers       QuizAnswer[]

  @@unique([userId, quizId])
}

model QuizAnswer {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  submissionId  String   @db.ObjectId
  submission    QuizSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  questionId    String   @db.ObjectId
  question      Question @relation(fields: [questionId], references: [id])
  selectedOptionId String? @db.ObjectId
  selectedOption   Option? @relation(fields: [selectedOptionId], references: [id])
  textAnswer    String?  // For short answer questions
  isCorrect     Boolean
}

// Quiz assignments from teacher to student
model QuizAssignment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId        String   @db.ObjectId
  quiz          Quiz     @relation(fields: [quizId], references: [id])
  studentId     String   @db.ObjectId
  student       User     @relation("StudentAssignments", fields: [studentId], references: [id])
  assignedById  String   @db.ObjectId
  assignedBy    User     @relation("AssignedByRelations", fields: [assignedById], references: [id])
  status        String   @default("assigned") // assigned, in_progress, completed
  dueDate       DateTime?
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime @default(now())

  @@index([studentId, quizId])
}

// Task Planner Models
model Task {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  category      String   // study, work, personal
  priority      String   @default("medium") // low, medium, high
  status        String   @default("pending") // pending, in_progress, completed
  dueDate       DateTime?
  completedAt   DateTime?
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Notification Model
model Notification {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  type          String   // deadline, result, announcement, task_reminder
  title         String
  message       String
  isRead        Boolean  @default(false)
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  relatedQuizId String?  @db.ObjectId
  relatedTaskId String?  @db.ObjectId
  createdAt     DateTime @default(now())
}

// Question Bank Model for Teachers
model QuestionBank {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  text          String
  type          String   // multiple_choice, true_false, short_answer
  difficulty    String?
  explanation   String?
  category      String
  isShared      Boolean  @default(false) // private or shared with other teachers
  creatorId     String   @db.ObjectId
  creator       User     @relation(fields: [creatorId], references: [id])
  options       Json?    // Store options as JSON for flexibility
  correctAnswer String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Audit Log Model for Admin Actions
model AuditLog {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  action        String   // user_created, user_updated, user_deleted, quiz_moderated, etc.
  targetType    String   // user, quiz, question, task
  targetId      String?  @db.ObjectId
  details       Json?    // Additional details about the action
  adminId       String   @db.ObjectId
  admin         User     @relation(fields: [adminId], references: [id])
  createdAt     DateTime @default(now())
}